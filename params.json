{"name":"ku4js-webapp","tagline":"kodmunki™ utilities for JavaScript Web Applications project.","body":"#ku4js-webApp\r\n\r\nkodmunki™ utilities for js Web Applications.\r\n\r\nThis project contains everything needed to create a compact and powerful MVC client application using kodmunki tools\r\nfor JavaScript. A Web Application created with this project will contain html templating engines,\r\najax services, local persistence that leverages HTML5 localStorage, form reading, writing and validation, and an\r\nincredible suite of excellent JavaScript tools including specifcation patterns and DTO (Data Transfer Objects),\r\nbrought to you by [ku4js-kernel](https://github.com/kodmunki/ku4js-kernel) and\r\n[ku4js-data](https://github.com/kodmunki/ku4js-data). All of these technologies are rooted in SOLID OO\r\nprinciples and thoughtful observation of JavaScript, HTML, and CSS SoC and IoC.\r\n\r\n<img src=\"http://www.kodmunki.com/media/logo-small.png\" alt=\"kodmunki\" />\r\n\r\n---\r\n\r\n#kodmunki™ build process\r\n\r\nThis build process is dependent upon yuicompressor and a specific directory structure:\r\n\r\n* root  \r\n * _build (This build script and the yuicompressor)\r\n * bin (The compiled scripts will appear here)\r\n * src (All script files go here)\r\n\r\nThe following variables found in setup () are\r\nexpected to be changed by the developer running\r\nthis process:\r\n\r\n* PROJNAME (The name of your project)\r\n* STARTMSG (A message to echo at start of build)\r\n* ENDMSG (A message to echo at end of build)\r\n\r\n---\r\n\r\n#Setup\r\nTo get your project going simply follow these instructions:\r\n\r\n1. Copy the contents of _TEMPLATE into your project.\r\n2. Update the project name in the build scripts.\r\n3. Rename the /src/-ProjectFiles- directory to the name that you set for the project name in #2 above.\r\n4. Enter your app name per the instructions found on line 3 of the /application/-Application-.js file.\r\n5. Rename the /application/-Application-.js file to a desired name.\r\n6. Build the application using the appropriate sh or cmd build script.\r\n7. Add a reference in the desired HTML page to **_one_** of the artifacts in the /bin directory.\r\n8. Add a reference in the desired HTML page to the renamed -Application-.js file.\r\n9. ROCK AND ROLL!\r\n\r\n---\r\n\r\n#Documentation\r\nThe following is the documentation for the template engine and the MVC application classes. For further information\r\ncheck out the [example project](https://github.com/kodmunki/ku4js-webApp/tree/master/example)\r\n\r\n##Templates\r\nHas access to the following protected methods and properties:\r\n\r\n| API | Return | Description |\r\n| --- | --- | --- |\r\n| $config(name:_String_) | config | Retrieves the template config named \"name\". |\r\n| $forms(name:_String_) | config | Retrieves the forms templates config named \"name\" (Shortcut for $config(\"forms\")[name]). |\r\n| $views(name:_String_) | config | Retrieves the views templates config named \"name\" (Shortcut for $config(\"views\")[name]). |\r\n| $render(template:_String_, data:_{}_) | String | Renders the template using object literal or dto data. |\r\n| $renderList(template:_String_, array:_Array<dto>_) | String | Renders template using object literal or dto data for each dto in array. |\r\n| $renderListWithAction(array:_Array<dto>_, func:_Function_) | String | Calls a specified render function for each dto in array. It is important that the specified action return a string value! |\r\n\r\n* Runtime instantiation requires valid templates config. _(This is a potential scenario in advanced development of an\r\nenterprise applications and should be heeded. For example, if you create a template for generic form fields\r\nspecifically, i.e. $.ku4webApp.template(\"forms\", { /*Your methods here*/ }, and want to access it from another template,\r\n you will have to instantiate it on the fly and pass the local config to it: $.ku4webApp.template.forms(this.$config()))_.\r\n\r\n```javascript\r\n$.ku4webApp.template(\"NAME\", {\r\n    //METHODS GO HERE\r\n    METHOD: function() { }\r\n});\r\n```\r\n\r\n##Models\r\nHas access to the following protected methods and properties:\r\n\r\n| API | Return | Description |\r\n| --- | --- | --- |\r\n| $collection(name:_String_) | collection | Retrieves the collection named \"name\". |\r\n| $service(name:_String_) | service | Retrieves the service named \"name\". |\r\n| $socket(name:_String_) | service | Retrieves the socket named \"name\". _(requires socket.io -- not included)_|\r\n| $validator(name:_String_) | validator | Retrieves the validator named \"name\". |\r\n| $state() | state | Retrieves the local state machine. |\r\n| $appState() | state | Retrieves the global state machine. |\r\n| $notify(data:_Object_, NAME, ...) | void | Notifies the subscribers in the list or arguments passing data if supplied. Calling this function without a list of subscribers will notify _all_ subscribers!|\r\n\r\n* Runtime instantiation requires a valid mediator, serviceFactory, storeFactory, and validatorFactory. _(This is a\r\nvery unlikely scenario)_.\r\n\r\n```javascript\r\n$.ku4webApp.model(\"NAME\", {\r\n    //METHODS GO HERE\r\n    METHOD: function() { },\r\n    CALLBACK: function() { }\r\n},\r\n{\r\n    //MEDIATOR SUBSCRIPTIONS GO HERE\r\n    \"SUBSCRIPTION\": CALLBACK\r\n});\r\n```\r\n\r\n##Views\r\n\r\nHas access to the following protected methods and properties:\r\n\r\n| API | Return | Description |\r\n| --- | --- | --- |\r\n| $template(name:_String_) | template | Retrieves the template named \"name\". |\r\n| $form(name:_String_) | form | Retrieves the form named \"name\". |\r\n| $navigator() | navigator | Retrieves the global navigator. |\r\n\r\n* Runtime instantiation requires a valid templateFactory and formFactory. _(This is an absurd scenario. If you require it,\r\nit is likely that you need to revisit [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller). If you\r\nfind a necessary reason, please contact [support@kodmunki.com](mailto:support@kodmunki.com) to share)_.\r\n\r\n```javascript\r\n$.ku4webApp.view(\"NAME\", {\r\n    //METHODS GO HERE\r\n    METHOD: function() { },\r\n    CALLBACK: function() { }\r\n},\r\n{\r\n    //MEDIATOR SUBSCRIPTIONS GO HERE\r\n    \"SUBSCRIPTION\": CALLBACK\r\n});\r\n```\r\n\r\n##Controllers\r\n\r\nHas access to the following protected methods and properties:\r\n\r\n| API | Return | Description |\r\n| --- | --- | --- |\r\n| $model(name:_String_) | model | Retrieves the model named \"name\". |\r\n| $form(name:_String_) | form | Retrieves the form named \"name\". |\r\n| $navigator() | navigator | Retrieves the global navigator. |\r\n\r\n* Runtime instantiation requires a valid modelFactory and formFactory.\r\n\r\n```javascript\r\n$.ku4webApp.controller(\"NAME\", {\r\n    //METHODS GO HERE\r\n});\r\n```\r\n\r\n##Applications/ files\r\n\r\nThese files are where you will initialize your controllers and views and expose your controller to the HTML page.\r\n\r\n```javascript\r\nvar controller;\r\n$(function(){\r\n    var appName = \"[ENTER YOUR APP NAME HERE]\",\r\n        app = $.ku4webApp.app();\r\n    controller = $.ku4webApp.controllers[appName](app)\r\n    $.ku4webApp.views[appName](app);\r\n\r\n/*======================================================*/\r\n\r\n //[Other desired views or initialization scripting HERE]\r\n\r\n/*======================================================*/\r\n\r\n});\r\n```\r\n\r\nWhen you have successfully integrated ku4js-webApp into your application you will be able to call your controller\r\nmethods by calling \"controller.yourMethod\" where \"yourMethod\" is some method that you have created in your custom\r\ncontroller. For example, if you had implemented a controller with the method \"execute\" and wished to call it from\r\na button you would add the following HTML into the desired location of your web application:\r\n\r\n```html\r\n<button onclick=\"controller.execute(); return false;\">Execute</button>\r\n```\r\n\r\n##Configurations\r\n\r\nThe dependency injection of ku4js-webApp is largely dependent upon the configuration files. These files are required\r\nfor a ku4js-webApp project to work successfully. They are very simple files to configure. The ones listed here\r\nare required and must be included in your ku4js-web app. You can add more of them as you need making ku4js-webApp\r\n**_very_** extensible! Documentation for each of the required configuration follows:\r\n\r\n###config.collections\r\n\r\nConfigures the local client-side persistence callback structure.\r\n\r\n```javascript\r\n/*\r\n    //COLLECTION\r\n    NAME: {\r\n        name: \"COLLECTION NAME\",\r\n        insert: \"ON CREATED\",\r\n        find: \"ON FOUND\",\r\n        update: \"ON UPDATED\",\r\n        remove: \"ON REMOVED\"\r\n    }\r\n */\r\n\r\n$.ku4webApp.config.collections = {\r\n    //ADD YOUR COLLECTIONS HERE\r\n};\r\n```\r\n\r\n###config.services\r\n\r\nConfigures the ajax services\r\n\r\n```javascript\r\n/*\r\n    NAME: {\r\n        verb: \"VERB\",\r\n        uri: \"URI\",\r\n        contentType: \"Content-Type\" //(OPTIONAL)\r\n        success: \"ON SUCCESS\",\r\n        error: \"ON ERROR\"\r\n    }\r\n */\r\n$.ku4webApp.config.services = {\r\n    //ADD YOUR SERVICES HERE\r\n};\r\n```\r\n\r\n####Service processId\r\n\r\nSometimes a developer retains state across service calls and in their architecture must be infomed which service call is\r\nresponsible for making the callback. ku4webApp service calls contain a processId for developers to use in this case.\r\nThis processId is returned when invoking the call method. This processId can be used to inform the system as to which\r\nservice call is making a notification of its callback. When a service makes a notification of its callback it will\r\nnotify each subscriber by passing any server data that was returned as a first argument and its processId as the second\r\narguments. Note the example callback method below:\r\n\r\n```javascript\r\nfunction callback(serverData, processId) {\r\n    console.log(serverData); //This will log returned data\r\n    console.log(processId); //This will log the notifying servers processId\r\n};\r\n```\r\n\r\n###config.sockets\r\n\r\nConfigures the ajax services\r\n\r\n```javascript\r\n/*\r\n    NAME: {\r\n        event: \"NAME\"\r\n        success: \"ON SUCCESS\",\r\n        error: \"ON ERROR\"\r\n    }\r\n */\r\n$.ku4webApp.config.sockets = {\r\n    //ADD YOUR SERVICES HERE\r\n};\r\n```\r\n\r\n###config.forms\r\n\r\nConfigures the forms that your controllers will read from when calling model methods that require user input, and that\r\nyour views will write to when there is data coming from the server that should be placed into the form on load, e.g.\r\nwhen a user is editing information that they have already provided.\r\n\r\n```javascript\r\n/*\r\n    NAME: [\r\n        //FIRST FIELD\r\n        {\r\n            selector: \"DOM SELECTOR\",\r\n            type: \"TYPE\", (OPTIONS: field, select, checkbox)\r\n            required: BOOL\r\n        },\r\n        //SECOND FIELD\r\n        {\r\n            selector: \"DOM SELECTOR\",\r\n            type: \"TYPE\", (OPTIONS: field, select, checkbox)\r\n            required: BOOL\r\n        }]\r\n */\r\n$.ku4webApp.config.forms = {\r\n    //ADD YOUR FORMS HERE\r\n};\r\n```\r\n\r\n###config.validators\r\n\r\nConfigures the validation rules that your models can use to validate operation classes before they are transmitted\r\nto the server.\r\n\r\n```javascript\r\n/*\r\n    //VALIDATOR\r\n    NAME: [\r\n        //VALIDATION RULE 1\r\n        {\r\n            name: \"DTO KEY TO VALIDATE\",\r\n            spec: SPEC ($.spec),\r\n            message: \"MESSAGE IF INVALID\"\r\n        },\r\n        //VALIDATION RULE 2\r\n        {\r\n            name: \"DTO KEY TO VALIDATE\",\r\n            spec: SPEC ($.spec),\r\n            message: \"MESSAGE IF INVALID\"\r\n        }]\r\n */\r\n$.ku4webApp.config.validators = {\r\n    //ADD YOUR VALIDATORS HERE\r\n};\r\n```\r\n\r\n###config.templates\r\n\r\nConfigures the templates in your web application. config.templates.forms and config.templates.views are required\r\ntemplate configurations.\r\n\r\n####config.templates.forms\r\n\r\n```javascript\r\n/*\r\n    NAME: 'HTML FORM FORMAT'\r\n */\r\n\r\n$.ku4webApp.config.templates.forms = {\r\n    //ADD YOUR FORM TEMPLATES HERE\r\n};\r\n```\r\n\r\n####config.templates.views\r\n\r\n```javascript\r\n/*\r\n    NAME: 'HTML FORMAT'\r\n */\r\n\r\n$.ku4webApp.config.templates.views = {\r\n    //ADD YOUR VIEW TEMPLATES HERE\r\n};\r\n```\r\n\r\n#Dependencies\r\n\r\nThis project requires the following dependencies:\r\n\r\n* [ku4js-kernel](https://github.com/kodmunki/ku4js-kernel)\r\n* [ku4js-data](https://github.com/kodmunki/ku4js-data)\r\n\r\n#Gotchas!\r\n\r\nSo, as with much JavaScript development, there may be a couple of gotchas! Below are listed a few of the items that\r\nnoobs (meant respectfully) may encounter. Let's just clear those up here, and if you have further questions, please,\r\nsend them to [support@kodmunki.com](mailto:support@kodmunki.com).\r\n\r\n1. Again, the configurations are **_key_** in this solution. They make things **_incredibly_** extensible but can\r\nbe a source of confusion for those new to IoC. The idea here is that you delegate your logic to the objects that \"care\"\r\nand **_only_** when they **_do_** \"care\". For example, your $collection may care about what it is and what it is\r\nsupposed to do, but it only \"cares\" when it actually has to perform it's operation. That said, you will **_certainly_**\r\nfind exceptions when you make calls to a collection via \"this.$collection(\"[NAME]\") if you have not **_configured_** a\r\ncollection in the required config \"config.collections.js\". If you find yourself with a \"Cannot read property 'name' of\r\nundefined\" error, for example. This likely means that you have not set up a config. In this example case, specifically,\r\nthis would indicate that you has not \"config-ed\" a collection that you are calling in your model. Config your collection\r\nin the appropriate \"config.collections.js\" my simply creating a \"key, object\" pair, i.e. \"[NAME]:{ name: \"[COLLECTION]\"}\r\nand you should resolve your exception. Generally, this holds true for services, forms, validators, and templates, as\r\nwell.\r\n\r\n2. Note that when you create a controller, model, or view, you do so with the english singular, e.g.\r\n$.ku4webApp.**_view_**(\"[NAME]\", { /*Your methods here*/}, {/*Your listeners here*/}). When you call it after it is\r\ninstantiated, you will call it using the english plural, as it has become part of a collection of **_views_**.\r\nTherefore, you would call this view in your [application].js as $.ku4webApp.**_views_**.NAME. If misspelled you are\r\ncertain to run into to rather convoluted: \"Uncaught TypeError: Object function (s,t,u){function l(w,v){l.base.call(this,\r\nw,v)}l.prototype=t;$.Class.extend(l,b);$.ku4webApp.views[s]=function(v){var w=new l(v.templateFactory,v.formFactory);if(\r\n$.exists(u)){$.hash(u).each(function(x){v.mediator.subscribe(x.key,w[x.value],w)})}return w}} has no method 'NAME'\"\r\nerror. This is telling you that you have a missed \"Plural\" in your [application].js (A less obfuscated exception message\r\nis in progress).\r\n\r\n3. You are, certainly able to access external controllers, models, views, and templates from within the current method\r\nin scope, but you must ensure that you have instantiated it correctly. That is, you must pass **_all_** relevant\r\nparameters to the instance. This is only likely in an advanced development scenario with regard to templates. If you have\r\nquestions, please, review the documentation above, or contact [support@kodmunki.com](mailto:support@kodmunki.com).\r\n\r\n4. If you find **_any_** instance of an error that states, \"ku4EXCEPTION @ $.MEDIATOR:\" Check the call stack. You are\r\nlikely to have not subscribed to a notification. The mediator attempted to call it and could not find a subscriber.\r\nThis means that the named notifier is erroneous and should, likely, be removed.\r\n\r\n5. Along with #4 above, you could also have an exception in your callback method. Read the stack trace and your method\r\nimplementation carefully, you will likely find your issue in the implementation. For further questions, contact\r\n[support@kodmunki.com](mailto:support@kodmunki.com).\r\n\r\n#Other cool features\r\n\r\n1. Did you know that along with the simple CRUD ops of find, insert, update and remove, you can also include $in,\r\nand $orderby in your find criteria? The $in query takes an object whose key is the property that you are interested in\r\nand an array value whose content are the values that you would like to include in the search. $orderby, on the other\r\nhand, takes an object whose key is the property that you are interested in and a numeric value or 1 or -1. 1 for\r\nascending ordering and -1 for descending. For example: if you had a collection of persons and wanted to find all of the\r\npeople whose first name was John, Linda or Larry and order them by their age in ascending order you could query from\r\nyour model as follows:\r\n\r\n```javascript\r\n    return this.$collection(\"persons\")\r\n        .find({$in: {name: [\"John\", \"Linda\", \"Larry\"]}, $orderby: { age: 1 }});\r\n```\r\n\r\n2. Did you know that ku4js-webApps ships with a testingBundle for you to use for your unit tests? You can see it\r\nat work in the example project's unit tests. For more info, check out the model, view and controller of the example\r\napplication in this project.","google":"UA-48046112-1","note":"Don't delete this file! It's used internally to help with page regeneration."}